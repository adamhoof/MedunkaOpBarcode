package main

import (
	barcode "MedunkaOpBarcode/pkg/Barcode"
	artist "MedunkaOpBarcode/pkg/CLIArtist"
	database "MedunkaOpBarcode/pkg/Database"
	env "MedunkaOpBarcode/pkg/Env" //you do not have to use your own Env file if you don't publish it anywhere, enter the credentials into the EssentialConfig

	essential "MedunkaOpBarcode/pkg/EssentialConfig"
	prerunchecker "MedunkaOpBarcode/pkg/PreRunChecker"
	serialcommunication "MedunkaOpBarcode/pkg/SerialCommunication"
	telegrambot "MedunkaOpBarcode/pkg/TelegramBot"
	typeconv "MedunkaOpBarcode/pkg/TypeConversion"
	"fmt"
	"github.com/tarm/serial"
	"os"
	"strings"
	"sync"
)

func main() {
	env.SetEnv()

	conf := essential.Config{ //configure your own values based on your hardware, privileges, settings etc., those values are going to be used throughout the program
		PathToCSVUpdateFile:                "/tmp/Products/", //include trailing slash
		CsvUpdateFileName:                  "update.csv",
		CsvDelimiter:                       ";",
		DatabaseTableName:                  "products",
		SerialPortName:                     "/dev/ttyAMA0",
		SerialPortBaudRate:                 9600,
		BarcodeReadingTerminationDelimiter: '\x0d',
		DbHost:                             os.Getenv("host"),
		DbName:                             os.Getenv("dbname"),
		DbPort:                             typeconv.StringToInt(os.Getenv("dbPort")),
		DbUser:                             os.Getenv("user"),
		DbUserPassword:                     os.Getenv("password"),
		TelegramBotToken:                   os.Getenv("botToken"),
		TelegramBotOwner:                   os.Getenv("botOwner"),
	}

	err := prerunchecker.CreateUpdateDirIfNotExists(conf.PathToCSVUpdateFile, os.ModePerm)
	if err != nil {
		fmt.Println(err)
		return
	}

	err = prerunchecker.RequestXlsx2CsvInstallationIfNotExists()
	if err != nil {
		fmt.Println(err)
		return
	}

	skladBois := telegrambot.User{Id: conf.TelegramBotOwner} //create user with id such that it is either group or user id generated by Telegram
	botHandler := telegrambot.Handler{Owner: skladBois}      //assign that user/group to the bot so that no one else talks to him
	botHandler.SetToken(conf.TelegramBotToken)

	var wg sync.WaitGroup //start the bot in a go routine so that he does not interfere with the rest of the program
	wg.Add(1)
	go func() {
		botHandler.StartBot()
	}()

	dbConnectionConfig := fmt.Sprintf("host=%s port=%d user=%s password=%s dbname=%s",
		conf.DbHost,
		conf.DbPort,
		conf.DbUser,
		conf.DbUserPassword,
		conf.DbName)

	var postgresDBHandler database.PostgresDBHandler
	err = postgresDBHandler.Connect(&dbConnectionConfig)
	if err != nil {
		fmt.Println(err)
		return
	}

	err = botHandler.OnReceiveFile(&postgresDBHandler, &conf)
	if err != nil {
		fmt.Println(err)
		return
	}

	serialPort, serialErr := serialcommunication.OpenPort(&serial.Config{Name: conf.SerialPortName, Baud: conf.SerialPortBaudRate})
	if serialErr != nil {
		fmt.Println(serialErr)
		return
	}

	var barcodeReaderHandler barcode.ReaderHandler
	barcodeReaderHandler.GetPort(serialPort)

	for {
		barcodeAsByteArray := barcodeReaderHandler.ReadUntilDelimiter(conf.BarcodeReadingTerminationDelimiter)
		artist.ClearTerminal()

		barcodeAsString := typeconv.ByteArrayToString(barcodeAsByteArray[:len(barcodeAsByteArray)-1]) //cut out the delimiter and convert to string

		name, stock, price, unitOfMeasure, unitOfMeasureKoef := postgresDBHandler.QueryProductData(database.GenerateQueryProductDataSQL(conf.DatabaseTableName), barcodeAsString)

		strPriceWithoutSuffix := strings.ReplaceAll(price, ".00 Kč", "")
		strPricePerMj := typeconv.FloatToString(typeconv.StringToFloat(strPriceWithoutSuffix) * unitOfMeasureKoef)

		artist.PrintStyledText(artist.ItalicWhite, name)
		artist.PrintSpaces(2)
		artist.PrintStyledText(artist.BoldRed, fmt.Sprintf("Cena za ks: %s Kč", strPriceWithoutSuffix))
		artist.PrintSpaces(2)

		if unitOfMeasure == "" {
			artist.PrintStyledText(artist.ItalicWhite, "Stock: "+stock)
			continue
		}
		artist.PrintStyledText(artist.ItalicWhite, fmt.Sprintf("Přepočet na %s: %s Kč", unitOfMeasure, strPricePerMj))
		artist.PrintSpaces(1)
		artist.PrintStyledText(artist.ItalicWhite, "Stock: "+stock)
	}
}
